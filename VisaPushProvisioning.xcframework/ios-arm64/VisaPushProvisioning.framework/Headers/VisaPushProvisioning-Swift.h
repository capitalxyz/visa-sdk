// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef VISAPUSHPROVISIONING_SWIFT_H
#define VISAPUSHPROVISIONING_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VisaPushProvisioning",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


enum VPSupportedWalletCode : NSInteger;

/// A request model class with walletCode
SWIFT_CLASS("_TtC20VisaPushProvisioning25VPCardProvisioningRequest")
@interface VPCardProvisioningRequest : NSObject
/// Wallet code for provisioning 
@property (nonatomic, readonly) enum VPSupportedWalletCode walletCode;
/// Wallet name for provisioning
@property (nonatomic, readonly, copy) NSString * _Nonnull walletName;
- (nonnull instancetype)initWithWalletCode:(enum VPSupportedWalletCode)walletCode walletName:(NSString * _Nonnull)walletName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VPProvisionStatus : NSInteger;

/// A model class with walletStatus as variable.
SWIFT_CLASS("_TtC20VisaPushProvisioning26VPCardProvisioningResponse")
@interface VPCardProvisioningResponse : NSObject
/// Wallet status for selected wallet
@property (nonatomic, readonly) enum VPProvisionStatus walletStatus;
- (nonnull instancetype)initWithWalletStatus:(enum VPProvisionStatus)walletStatus OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VPErrorType : NSInteger;

/// A model class with error details. SDK will send the object of VPError to caller in any listener callback, providing necessary details for the failure.
SWIFT_CLASS("_TtC20VisaPushProvisioning7VPError")
@interface VPError : NSObject
/// SDK provides VPErrorType enum as error type
@property (nonatomic, readonly) enum VPErrorType type;
/// error code
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// error description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Correlation Id
@property (nonatomic, readonly, copy) NSString * _Nonnull correlationId;
- (nonnull instancetype)initWithType:(enum VPErrorType)type correlationId:(NSString * _Nonnull)correlationId OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Error type enum to handle any error occurred in SDK
typedef SWIFT_ENUM(NSInteger, VPErrorType, open) {
/// SDK initialization failed due to empty App ID.
  VPErrorTypeEmptyAppId = 0,
/// SDK initialization failed due to unsuccessful device registration/authentication.
  VPErrorTypeDeviceAuthenticationFailed = 1,
/// SDK initialization failed due to root detection.
  VPErrorTypeDeviceRootDetection = 2,
/// Card eligibility check failed due to empty encrypted payload.
  VPErrorTypeEmptyEncryptedPayload = 3,
/// No wallets are supported for this card.
  VPErrorTypeNoWallets = 4,
/// Card Id provided in request is invalid.
  VPErrorTypeInvalidCardId = 5,
/// Card eligibility check failed due to invalid or missing card last 4 digits.
  VPErrorTypeInvalidCardLast4Digits = 6,
/// Provisioning is not allowed for this wallet.
  VPErrorTypeProvisioningNotAllowed = 7,
/// Card provisioning failed as it was cancelled by user.
  VPErrorTypeCancelledByUser = 8,
/// Card provisioning failed due to unsupported card.
/// Card provisioning failed as it was cancelled by system.
/// Card provisioning failed due to some unknown PassKit error.
  VPErrorTypeAppleWalletProvisioningError = 9,
/// Unable to create Payment Pass View.
  VPErrorTypeUnableToCreateApplePaymentPassView = 10,
/// Valid certificates not found while creating Add Payment Pass request.
  VPErrorTypeValidAppleCertificatesNotFound = 11,
/// Please check your device network connectivity.
  VPErrorTypeNetworkFailure = 12,
/// Your session has been expired. Please reinitialise the process.
  VPErrorTypeSessionExpired = 13,
/// Failure due to invalid card details
  VPErrorTypeInvalidInfo = 14,
/// Card Information decryption failed due to invalid or expired secret used
  VPErrorTypePayloadDecryptionFailed = 15,
/// Sorry, we are unable to process your request at this time. Please try again later.
  VPErrorTypeApiError = 16,
/// Nonce provided in the request is invalid
  VPErrorTypeInvalidNonce = 17,
/// The user exceeded the maximum number of attempts.
  VPErrorTypeSDKLockout = 18,
/// Provisioning started but could not get wallet provisioning status.
  VPErrorTypeWalletProvisioningInconclusive = 19,
/// Error while provisioning wallet.
  VPErrorTypeWalletProvisioningError = 20,
};


/// A response model class with signedNonce string variable. signedNonce value to be used to encrypt the card informaion
SWIFT_CLASS("_TtC20VisaPushProvisioning14VPInitResponse")
@interface VPInitResponse : NSObject
/// Nonce value to be used by issuer, to encrypt card informaion
@property (nonatomic, readonly, copy) NSString * _Nonnull signedNonce;
- (nonnull instancetype)initWithSignedNonce:(NSString * _Nonnull)signedNonce OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Provisioning status for a wallet
typedef SWIFT_ENUM(NSInteger, VPProvisionStatus, open) {
/// Card is eligible to provisioning for wallet
  VPProvisionStatusReadyToProvision = 0,
/// Card is already added to wallet
  VPProvisionStatusAlreadyProvisioned = 1,
/// Card is provisioned in the current device
  VPProvisionStatusProvisionedInCurrentDevice = 2,
/// Card is provisioned in a remote/paired device
  VPProvisionStatusProvisionedInPairedDevice = 3,
/// In case any other issue wallet status will be .notAvailable
  VPProvisionStatusNotAvailable = 4,
};


/// A model class for reason if wallet status as .NotAvailable
SWIFT_CLASS("_TtC20VisaPushProvisioning8VPReason")
@interface VPReason : NSObject
/// If wallet status is .notAvailable, reason will provide detail for same
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
- (nonnull instancetype)initWithReason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A model class with wallet detail
SWIFT_CLASS("_TtC20VisaPushProvisioning17VPSupportedWallet")
@interface VPSupportedWallet : NSObject
/// Wallet code like .ApplePayPushProvision
@property (nonatomic, readonly) enum VPSupportedWalletCode code;
/// Wallet status. default value is .NotAvailable
@property (nonatomic) enum VPProvisionStatus status;
/// Wallet category. default value is “N/A”
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Wallet image
@property (nonatomic, readonly, copy) NSString * _Nullable logoImageURLString;
/// If wallet status is .NotAvailable, reason will provide detail for same
@property (nonatomic, readonly, strong) VPReason * _Nonnull reason;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(enum VPSupportedWalletCode)code status:(enum VPProvisionStatus)status name:(NSString * _Nonnull)name category:(NSString * _Nonnull)category reason:(VPReason * _Nonnull)reason logoImageURLString:(NSString * _Nullable)logoImageURLString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Wallet Code enum that has list of supported wallet codes by the SDK
typedef SWIFT_ENUM(NSInteger, VPSupportedWalletCode, open) {
/// ApplePayPushProvision
  VPSupportedWalletCodeApplePayPushProvision = 0,
/// Visa Card Enrollment Hub
  VPSupportedWalletCodeVCEHPushProvision = 1,
};


/// A request model class with encrypted card information.
SWIFT_CLASS("_TtC20VisaPushProvisioning24VPSupportedWalletRequest")
@interface VPSupportedWalletRequest : NSObject
/// Encrypted card information
@property (nonatomic, readonly, copy) NSString * _Nonnull encPayload;
- (nonnull instancetype)initWithEncPayload:(NSString * _Nonnull)encPayload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A response model class with array of supported wallets
SWIFT_CLASS("_TtC20VisaPushProvisioning25VPSupportedWalletResponse")
@interface VPSupportedWalletResponse : NSObject
/// Array of supported wallets
@property (nonatomic, readonly, copy) NSArray<VPSupportedWallet *> * _Nonnull wallets;
- (nonnull instancetype)initWithWallets:(NSArray<VPSupportedWallet *> * _Nonnull)wallets OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VPTestScenario, open) {
  VPTestScenarioApplePayNotSetupForBin = 0,
  VPTestScenarioApplePayCardNotSupported = 1,
  VPTestScenarioApplePayCardProvisioningFailed = 2,
  VPTestScenarioApplePayCardAlreadyProvisioned = 3,
  VPTestScenarioApplePayCardProvisioningSuccess = 4,
  VPTestScenarioEmptyAppId = 5,
  VPTestScenarioIncorrectAppId = 6,
};

@class UIViewController;

SWIFT_PROTOCOL("_TtP20VisaPushProvisioning29VisaPushProvisioningInterface_")
@protocol VisaPushProvisioningInterface
/// Initiate Provisioning SDK authentication process. SDK will securely set up the communication channels to the Visa Backend systems.
/// This includes device profiling and secure session management.
/// On successful initialization, SDK will call <code>initializationSuccess(pushProvisioningInterface: VisaPushProvisioningInterface, response: VPInitResponse)</code> callback method and pass encrypted nonce in VPInitResponse.
/// On failure of initialization, SDK will call <code>initializationFailure(pushProvisioningInterface: VisaPushProvisioningInterface, error: VPError)</code> callback method and pass VPError object containing error code, description and other details.
- (void)initialize;
/// Get supported wallets list for a card
/// On successful getSupportedWallets call, SDK will pass list of supported wallets in <code>supportedWalletSuccess(pushProvisioningInterface: VisaPushProvisioningInterface, response: VPSupportedWalletResponse)</code> callback method.
/// On failure of getSupportedWallets call, SDK will pass VPError object containing error code, description and other details in <code>supportedWalletFailure(pushProvisioningInterface: VisaPushProvisioningInterface, error: VPError)</code> callback method
/// \param request Object of VPSupportedWalletRequest class, which will have encrypted card information
///
- (void)getSupportedWalletsWithRequest:(VPSupportedWalletRequest * _Nonnull)request;
/// This method pushes an eligible card to a wallet. SDK will launch PKAddPaymentPassViewController with all required data.
/// \param request Object of VPSupportedWalletRequest class, which will encrypted card information.
///
/// \param initialView Object of UIViewController where <code>PKAddPaymentPassViewController</code> will be presented to view controller
///
- (void)startCardProvisioningWithRequest:(VPCardProvisioningRequest * _Nonnull)request initialView:(UIViewController * _Nonnull)initialView;
@end

@protocol VisaPushProvisioningListener;

SWIFT_CLASS("_TtC20VisaPushProvisioning36VisaPushProvisioningInterfaceFactory")
@interface VisaPushProvisioningInterfaceFactory : NSObject
/// This method will create instance of VisaPushProvisioningInterface. All the subsequent calls will be made using that object
/// \param listener Object of <code>VisaPushProvisioningListener</code> protocol. SDK will make necessary callbacks to caller. The listener is not retained.
///
/// \param testScenario Object of <code>VPTestScenario</code> enum. SDK will simulate selected errors from the enum.
///
+ (id <VisaPushProvisioningInterface> _Nonnull)createPushProvisioningInterfaceWithListener:(id <VisaPushProvisioningListener> _Nonnull)listener testScenario:(enum VPTestScenario)testScenario SWIFT_WARN_UNUSED_RESULT;
/// This method will create instance of VisaPushProvisioningInterface. All the subsequent calls will be made using that object
/// \param listener Object of <code>VisaPushProvisioningListener</code> protocol. SDK will make necessary callbacks to caller. The listener is not retained.
///
+ (id <VisaPushProvisioningInterface> _Nonnull)createPushProvisioningInterfaceWithListener:(id <VisaPushProvisioningListener> _Nonnull)listener SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// VisaPushProvisiningListener is protocol which will have callback methods defined. SDK will use this protocol methods to communicate with user.
SWIFT_PROTOCOL("_TtP20VisaPushProvisioning28VisaPushProvisioningListener_")
@protocol VisaPushProvisioningListener
/// Callback method when Provisioning SDK initialize() succeed
/// \param pushProvisioningInterface Instance of the <code>VisaPushProvisioningInterface</code> using which further method calls can be made
///
/// \param response Response object containing  nonce value to be used by issuer, to encrypt the data
///
- (void)initializationSuccessWithPushProvisioningInterface:(id <VisaPushProvisioningInterface> _Nonnull)pushProvisioningInterface response:(VPInitResponse * _Nonnull)response;
/// Callback method when Provisioning SDK initialization failed
/// \param pushProvisioningInterface Instance of the <code>VisaPushProvisioningInterface</code> using which further method calls can be made
///
/// \param error VPError object containing error code, description and other details
///
- (void)initializationFailureWithPushProvisioningInterface:(id <VisaPushProvisioningInterface> _Nonnull)pushProvisioningInterface error:(VPError * _Nonnull)error;
/// Callback method when <code>getSupportedWallets</code> method succeed
/// \param pushProvisioningInterface Instance of the <code>VisaPushProvisioningInterface</code> using which further method calls can be made
///
/// \param response Response object with list of supported wallets for given card in <code>getSupportedWallets</code> method
///
- (void)supportedWalletSuccessWithPushProvisioningInterface:(id <VisaPushProvisioningInterface> _Nonnull)pushProvisioningInterface response:(VPSupportedWalletResponse * _Nonnull)response;
/// Callback method when <code>getSupportedWallets</code> method failed
/// \param pushProvisioningInterface Instance of the <code>VisaPushProvisioningInterface</code> using which further method calls can be made
///
/// \param error VPError object containing error code, description and other details
///
- (void)supportedWalletFailureWithPushProvisioningInterface:(id <VisaPushProvisioningInterface> _Nonnull)pushProvisioningInterface error:(VPError * _Nonnull)error;
/// Callback method when <code>startCardProvisioning</code> method succeed. This method will be called when user has disabled customUI flag
/// \param pushProvisioningInterface Instance of the <code>VisaPushProvisioningInterface</code> using which further method calls can be made
///
/// \param response Response object containing wallet status which got provisioned
///
- (void)cardProvisioningSuccessWithPushProvisioningInterface:(id <VisaPushProvisioningInterface> _Nonnull)pushProvisioningInterface response:(VPCardProvisioningResponse * _Nonnull)response;
/// Callback method when <code>startCardProvisioning</code> method succeed. This method will be called when user has disabled customUI flag
/// \param pushProvisioningInterface Instance of the <code>VisaPushProvisioningInterface</code> using which further method calls can be made
///
/// \param error VPError object containing error code, description and other details.
///
- (void)cardProvisioningFailureWithPushProvisioningInterface:(id <VisaPushProvisioningInterface> _Nonnull)pushProvisioningInterface error:(VPError * _Nonnull)error;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
